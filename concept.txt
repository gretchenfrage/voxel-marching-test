
input vec3f direction        <-- satisfies: normalized
input vec3i voxel
input vec3f ingress          <-- satisfies: 0 <= n <= 1 for each component

outer_loop: loop:
    // sign of the direction components determine which planes they will intersect
    // with.
    //
    // an edge case exists where a direction component is 0. this must be handled.
    vec3f planes = ceil(direction)    <-- satisfies: each component equals 0 or 1

    float[3] distances                <-- euclidean distance to collision with 3 planes

    // plane intersections
    for a in [0, 1, 2]:                     <-- unroll loop
        // this is what we want to do:
        //
        // `distances[a] = (planes[a] - ingress[a]) / direction[a]`
        //
        // but if direction[a] == 0.0, this would pollute subsequent computations

        // so we use a trick
        distances[a] = (
                           (
                               planes[a] - ingress[a]
                           ) / (
                               // if the denominator is 0, change it to 1, to avoid
                               // divide-by-zero, which would pollute the calculation

                               direction[a] + int(direction[a] == 0.0)
                           )
                       ) * (
                           // if the denominator is 0, set distances[a] to 0, to mark
                           // it as a bogus value in a defined-behavior way

                           int(direction[a] != 0.0)
                       )

        ASSERT(distances[a] >= 0.0)     <-- as in, this should always be true

    // sort plane intersections by distance.
    //
    // we compute an ordered sequence of length 1 <= n <= 3, corresponding to
    // subsequent voxels the ray will pass through. each step in the sequence contains
    // the distance to the voxel, and the voxel coordinate delta. from that distance
    // to the voxel, we can calculate the voxel ingress coordinate.
    //
    // if the ray passes through an edge or corner, it will intersect 2 or 3 planes
    // at the same distance. in the case, we will de-duplicate/merge the two
    // intersections, by summing their voxel deltas.
    //
    // this sequence may be shorter than 3 steps due to the ray-intersecting-edge/corner
    // edge case and/or the direction[a]==0 edge case. to represent this, a step will be
    // considered non-present if its value in the distance arrays is equal to zero.
    //
    // one can intuit that there is no possible situation where the sequence would
    // have a length of zero.

    float[3] seq_distance = [0.0, 0.0, 0.0]     <-- by initializing these values to 0.0
                                                    they will be considered non-present
                                                    unless initialized
    vec3i[3] seq_voxel_delta = [<0, 0, 0>, <0, 0, 0>, <0, 0, 0>]

    for (a, b, c) in [(0, 1, 2), (1, 2, 0), (2, 0, 1)]:         <-- unroll loop
        // we essentially perform an insertion sort. we calculate the index to insert
        // each element, based on the number of other elements it is greater than.
        // this allows us to perform the sort with no branching.
        //
        // by comparing with >, instead of >=, we achieve our desired de-duplication
        // effect.

        int index = int(
                        distances[a] > distances[b]
                    ) + int(
                        distances[a] > distances[c]
                    )

        // in the edge case where a distance is zero, it will be sorted as the first
        // element in the step sequence. however, since it will leave the seq_distance
        // value equal to 0.0, our computations will consider that index a non-present
        // step in the sequence.
        //
        // that should take care of that edge-case :)
        seq_distance[index] = distances[a]

        // for this part, we can almost say:
        //
        // `seq_voxel_delta[index] += planes[index]`
        //
        // however, planes has component values in the set { 0, 1 }
        // and we want a component increment in the set { -1, 1 }
        //
        // since this iteration is inserting the intersection with the plane on axis
        // a, it can only affect component a of the voxel delta. so we can use this
        // computation instead.
        seq_voxel_delta[index][a] += sign(direction[a])

        // only on the edge case will we not increment seq_voxel_delta[index], in which
        // case the shader should not care about the value of seq_voxel_delta[index],
        // since seq_distance[index] == 0.
        ASSERT((direction[a] == 0) == (distances[a] == 0))

    // now that we have ordered the sequence, we will map seq_distance to seq_ingress.
    //
    // we need to do this ahead of time, because calculating a subsequent ingress is a
    // function of the current ingress, but we will overwrite the current ingress
    // variable as we loop through the sequence.
    //
    // we calculate the subsequent ingress points from corresponding plane collision
    // distances. since the plane collision distance is stored in current voxel-space,
    // the subsequent ingress points we calculate will be in current voxel-space.
    // however, we want them to be in their own voxel-space. to achieve this, we keep
    // an accumulator of voxel space.

    vec3f[3] seq_ingress
    vec3i voxel_delta_accumulator = <0, 0, 0>

    for i in [0, 1, 2]:             <-- unroll loop
        // at this point, we are relying on the behavior that seq_voxel_delta[i]==0
        // when that sequence step is non-present
        voxel_delta_accumulator += seq_voxel_delta[i]

        seq_ingress[i] = (
                             // calculate the sequence ingress in current voxel-space
                             ingress + (direction * seq_distance[i])
                         ) - (
                             // then adjust it into its own voxel-space
                             voxel_delta_accumulator
                         )
    // (note: voxel_delta_accumulator will no longer be used after this point)

    // finally, we can loop through the steps and run whatever intersection
    // code we want

    inner_loop: for i in [0, 1, 2]:         <-- unroll loop
        // skip this loop iteration if the step doesn't exist.
        //
        // this is one of the few branches in this algorithm. in random conditions,
        // this branch will likely skip far more often than it will hit, which
        // hopefully can allow a branch predictor to compensate for some of the cost.
        if (seq_distance[i] == 0.0):
            continue inner_loop

        // change relevant variables
        voxel += seq_voxel_delta[i]
        ingress = seq_ingress[i]        <-- although not required in program input, once
                                            ingress has been reassigned at least once,
                                            it will forevermore satisfy the property:
                                            at least one component equals 0 or 1

        // this part is sort of hand-wavey, but generally involves inserting your
        // use-case specific ray tracing code here, which may allow you to optimize
        // out some branches.
        #USER_CODE(
            voxel=&voxel,
            ingress=&ingress,
            direction=&mut direction,       <-- the user code may change the direction
                                                eg. for refraction or reflection
        )

        #IF USER CODE DOES NOT WANT TO RAYTRACE ANY MORE:
            // we can't raytrace forever, but the user code can determine the termination
            // condition
            break outer_loop

        #IF USER CODE CHANGED THE DIRECTION:
            // a change in direction invalidates the subsequent computations of our
            // inner sequence, so we must skip back to the outer loop so that those
            // can be computer freshly
            break inner_loop

